swagger: "2.0"
info:
  description: "Zaun service\n"
  version: "1.0.1"
  title: "Zaun"
host: "virtserver.swaggerhub.com"
basePath: "/kata.ai/zaun/1.0.0"
schemes:
- "https"
paths:
  /caches:
    delete:
      summary: "Clear diaenne's caches"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
      security:
      - Bearer: []
  /timestamp:
    get:
      summary: "Get current timestamp"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
      security:
      - Bearer: []
  /tokens:
    post:
      summary: "Create token"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Token object"
        required: true
        schema:
          $ref: "#/definitions/Token"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Token"
      security:
      - Bearer: []
  /tokens/{tokenId}:
    get:
      summary: "Read token by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "tokenId"
        in: "path"
        description: "Token ID"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Token"
      security:
      - Bearer: []
  /login:
    post:
      summary: "Login"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Login"
        required: true
        schema:
          $ref: "#/definitions/Login"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Token"
  /analytics/{botId}/{deploymentId}/{object}:
    get:
      summary: "Get analytic data"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "Bot ID"
        required: true
        type: "string"
      - name: "deploymentId"
        in: "path"
        description: "Deployment ID"
        required: true
        type: "string"
      - name: "object"
        in: "path"
        description: "Object"
        required: true
        type: "string"
        enum:
        - "flows"
        - "intents"
        - "messages"
      - name: "args"
        in: "query"
        description: "Additional arguments such as channelId, startTimestamp, endTimestamp,\
          \ etc"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
      security:
      - Bearer: []
  /bots:
    get:
      summary: "Get all bots"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit returned bots in a page"
        required: false
        type: "integer"
      - name: "page"
        in: "query"
        description: "A number representing page"
        required: false
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PagedBot"
      security:
      - Bearer: []
    post:
      summary: "Create bot"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Bot"
        required: true
        schema:
          $ref: "#/definitions/Bot"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Bot"
      security:
      - Bearer: []
  /bots/{botId}:
    get:
      summary: "Find bot by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Bot"
      security:
      - Bearer: []
    put:
      summary: "Update bot by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot to update"
        required: true
        type: "string"
      - name: "increment"
        in: "query"
        description: "Increment version number"
        required: false
        type: "string"
        enum:
        - "major"
        - "minor"
        - "patch"
      - in: "body"
        name: "body"
        description: "Bot"
        required: true
        schema:
          $ref: "#/definitions/Bot"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Bot"
      security:
      - Bearer: []
    delete:
      summary: "Delete bot by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Bot"
      security:
      - Bearer: []
  /bots/{botId}/versions:
    get:
      summary: "Get bot versions"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/inline_response_200"
      security:
      - Bearer: []
  /bots/{botId}/converse:
    post:
      summary: "Converse"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Conversation object"
        required: true
        schema:
          $ref: "#/definitions/Conversation"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties: {}
      security:
      - Bearer: []
  /bots/{botId}/exec/{object}:
    post:
      summary: "Execute intent, state mapper, action, or"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot"
        required: true
        type: "string"
      - name: "object"
        in: "path"
        description: "Object"
        required: true
        type: "string"
        enum:
        - "intent"
        - "state-mapper"
        - "action"
        - "flow"
      - in: "body"
        name: "body"
        description: "Exec body"
        required: true
        schema:
          type: "object"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties: {}
      security:
      - Bearer: []
  /bots/{botId}/draft:
    get:
      summary: "Get bot draft"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot to deploy"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Bot"
      security:
      - Bearer: []
    post:
      summary: "Create bot draft"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot to deploy"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Bot Draft object"
        required: true
        schema:
          $ref: "#/definitions/Bot"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Bot"
      security:
      - Bearer: []
    put:
      summary: "Update bot draft"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Bot Draft"
        required: true
        schema:
          $ref: "#/definitions/Bot"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Bot"
      security:
      - Bearer: []
    delete:
      summary: "Delete bot draft"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Bot"
      security:
      - Bearer: []
  /bots/{botId}/deployments:
    get:
      summary: "Get all bot deployments"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot to deploy"
        required: true
        type: "string"
      - name: "limit"
        in: "query"
        description: "Limit returned bots in a page"
        required: false
        type: "integer"
      - name: "page"
        in: "query"
        description: "A number representing page"
        required: false
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/inline_response_200_1"
      security:
      - Bearer: []
    post:
      summary: "Create bot deployment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot to deploy"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Deployment object"
        required: false
        schema:
          $ref: "#/definitions/Deployment"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Deployment"
      security:
      - Bearer: []
  /bots/{botId}/deployments/{deploymentId}:
    get:
      summary: "Find deployment by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot"
        required: true
        type: "string"
      - name: "deploymentId"
        in: "path"
        description: "ID of deployment to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Deployment"
      security:
      - Bearer: []
    put:
      summary: "Update deployment by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot"
        required: true
        type: "string"
      - name: "deploymentId"
        in: "path"
        description: "ID of deployment to update"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Deployment"
        required: true
        schema:
          $ref: "#/definitions/Deployment"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties: {}
      security:
      - Bearer: []
    delete:
      summary: "Delete deployment by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot"
        required: true
        type: "string"
      - name: "deploymentId"
        in: "path"
        description: "ID of deployment to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Deployment"
      security:
      - Bearer: []
  /bots/{botId}/deployments/{deploymentId}/sessions:
    post:
      summary: "Create session for bot deployment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot"
        required: true
        type: "string"
      - name: "deploymentId"
        in: "path"
        description: "ID of deployment"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Session"
        required: true
        schema:
          $ref: "#/definitions/Session"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Session"
      security:
      - Bearer: []
  /bots/{botId}/deployments/{deploymentId}/sessions/{sessionId}:
    get:
      summary: "Find session by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot"
        required: true
        type: "string"
      - name: "deploymentId"
        in: "path"
        description: "ID of deployment to update"
        required: true
        type: "string"
      - name: "sessionId"
        in: "path"
        description: "ID of session to return"
        required: true
        type: "string"
      - name: "mode"
        in: "query"
        description: "get mode"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Session"
      security:
      - Bearer: []
    put:
      summary: "Update session by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot"
        required: true
        type: "string"
      - name: "deploymentId"
        in: "path"
        description: "ID of deployment to update"
        required: true
        type: "string"
      - name: "sessionId"
        in: "path"
        description: "ID of session to update"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Session"
        required: true
        schema:
          $ref: "#/definitions/Session"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties: {}
      security:
      - Bearer: []
    delete:
      summary: "Delete session by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot"
        required: true
        type: "string"
      - name: "deploymentId"
        in: "path"
        description: "ID of deployment to update"
        required: true
        type: "string"
      - name: "sessionId"
        in: "path"
        description: "ID of session to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Session"
      security:
      - Bearer: []
  /bots/{botId}/deployments/{deploymentId}/channels:
    get:
      summary: "Get all channels"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit returned channels in a page"
        required: false
        type: "integer"
      - name: "page"
        in: "query"
        description: "A number representing page"
        required: false
        type: "integer"
      - name: "botId"
        in: "path"
        description: "ID of bot"
        required: true
        type: "string"
      - name: "deploymentId"
        in: "path"
        description: "ID of deployment to update"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/inline_response_200_2"
      security:
      - Bearer: []
    post:
      summary: "Create a channel"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Channel object"
        required: true
        schema:
          $ref: "#/definitions/Channel"
      - name: "botId"
        in: "path"
        description: "ID of bot"
        required: true
        type: "string"
      - name: "deploymentId"
        in: "path"
        description: "ID of deployment"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Channel"
      security:
      - Bearer: []
  /bots/{botId}/deployments/{deploymentId}/channels/{channelId}:
    get:
      summary: "Find channel by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot"
        required: true
        type: "string"
      - name: "deploymentId"
        in: "path"
        description: "ID of deployment to update"
        required: true
        type: "string"
      - name: "channelId"
        in: "path"
        description: "ID of channel"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Channel"
      security:
      - Bearer: []
    put:
      summary: "Update channel by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot"
        required: true
        type: "string"
      - name: "deploymentId"
        in: "path"
        description: "ID of deployment to update"
        required: true
        type: "string"
      - name: "channelId"
        in: "path"
        description: "ID of channel to update"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Channel object"
        required: true
        schema:
          $ref: "#/definitions/Channel"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Channel"
      security:
      - Bearer: []
    delete:
      summary: "Delete channel by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot"
        required: true
        type: "string"
      - name: "deploymentId"
        in: "path"
        description: "ID of deployment to update"
        required: true
        type: "string"
      - name: "channelId"
        in: "path"
        description: "ID of channel to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Channel"
      security:
      - Bearer: []
  /bots/{botId}/deployments/{deploymentId}/schedules:
    get:
      summary: "Get all schedules"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit returned schedules in a page"
        required: false
        type: "integer"
      - name: "page"
        in: "query"
        description: "A number representing page"
        required: false
        type: "integer"
      - name: "botId"
        in: "path"
        description: "ID of bot"
        required: true
        type: "string"
      - name: "deploymentId"
        in: "path"
        description: "ID of deployment to update"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/inline_response_200_3"
      security:
      - Bearer: []
    post:
      summary: "Create a schedule"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Schedule object"
        required: true
        schema:
          $ref: "#/definitions/Schedule"
      - name: "botId"
        in: "path"
        description: "ID of bot"
        required: true
        type: "string"
      - name: "deploymentId"
        in: "path"
        description: "ID of deployment"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Schedule"
      security:
      - Bearer: []
  /bots/{botId}/deployments/{deploymentId}/schedules/{scheduleId}:
    get:
      summary: "Find schedule by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot"
        required: true
        type: "string"
      - name: "deploymentId"
        in: "path"
        description: "ID of deployment to update"
        required: true
        type: "string"
      - name: "scheduleId"
        in: "path"
        description: "ID of schedule"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Schedule"
      security:
      - Bearer: []
    delete:
      summary: "Delete schedule by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "botId"
        in: "path"
        description: "ID of bot"
        required: true
        type: "string"
      - name: "deploymentId"
        in: "path"
        description: "ID of deployment to update"
        required: true
        type: "string"
      - name: "scheduleId"
        in: "path"
        description: "ID of schedule to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Schedule"
      security:
      - Bearer: []
  /users:
    get:
      summary: "Get all users"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit returned users in a page"
        required: false
        type: "integer"
      - name: "page"
        in: "query"
        description: "A number representing page"
        required: false
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/inline_response_200_4"
      security:
      - Bearer: []
    post:
      summary: "Create a user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "object"
            properties: {}
      security:
      - Bearer: []
  /users/{userId}:
    get:
      summary: "Find user by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties: {}
      security:
      - Bearer: []
    put:
      summary: "Update user by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to update"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "User object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties: {}
      security:
      - Bearer: []
    delete:
      summary: "Delete user by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
      security:
      - Bearer: []
  /users/{userId}/teams:
    get:
      summary: "Find user's teams"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
      security:
      - Bearer: []
  /users/{userId}/tokens:
    get:
      summary: "Find user's tokens"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Token"
      security:
      - Bearer: []
  /teams:
    post:
      summary: "Create a team"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Team object"
        required: true
        schema:
          $ref: "#/definitions/Team"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/inline_response_200_5"
      security:
      - Bearer: []
  /teams/{teamId}/users:
    get:
      summary: "Find users in a team"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        description: "ID of team to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/inline_response_200_5"
      security:
      - Bearer: []
  /teams/{teamId}/users/{userId}:
    post:
      summary: "Add user to team"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        description: "Team ID"
        required: true
        type: "string"
      - name: "userId"
        in: "path"
        description: "User ID"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "User object"
        required: true
        schema:
          $ref: "#/definitions/body"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/inline_response_200_5"
      security:
      - Bearer: []
    delete:
      summary: "Delete user from team"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        description: "Team ID"
        required: true
        type: "string"
      - name: "userId"
        in: "path"
        description: "User ID"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/inline_response_200_5"
      security:
      - Bearer: []
  /nlus:
    get:
      summary: "Get all nlus"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit returned bots in a page"
        required: false
        type: "integer"
      - name: "page"
        in: "query"
        description: "A number representing page"
        required: false
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PagedGeistNlu"
      security:
      - Bearer: []
    post:
      summary: "Create nlu"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Nlu object"
        required: true
        schema:
          $ref: "#/definitions/GeistNlu"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/inline_response_200_6"
      security:
      - Bearer: []
  /nlus/{nluName}:
    get:
      summary: "Find NLU by name"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "nluName"
        in: "path"
        description: "Name of nlu to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/inline_response_200_6"
      security:
      - Bearer: []
    put:
      summary: "Update nlu by name"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "nluName"
        in: "path"
        description: "Name of nlu to update"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Nlu"
        required: true
        schema:
          $ref: "#/definitions/body_1"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/inline_response_200_6"
      security:
      - Bearer: []
    delete:
      summary: "Delete Nlu by Name"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "nluName"
        in: "path"
        description: "Name of nlu to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
      security:
      - Bearer: []
  /nlus/{nluName}/snapshot:
    get:
      summary: "Snapshot NLU"
      produces:
      - "application/json"
      parameters:
      - name: "nluName"
        in: "path"
        description: "Name of nlu"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
      security:
      - Bearer: []
  /nlus/profiles:
    get:
      summary: "Get list profile NLU"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties: {}
      security:
      - Bearer: []
  /nlus/public:
    get:
      summary: "Get list public NLU"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
      security:
      - Bearer: []
  /nlus/{nluName}/train:
    post:
      summary: "Train NLU"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "nluName"
        in: "path"
        description: "Name of nlu"
        required: true
        type: "string"
      - name: "sentence"
        in: "formData"
        description: "NLU training data"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "NLU training data. Accepted formats: JSON/YAML/TXT"
        required: false
        type: "file"
        items:
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/inline_response_200_7"
      security:
      - Bearer: []
  /nlus/{nluName}/training_data:
    get:
      summary: "Get analytic data"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "nluName"
        in: "path"
        description: "Bot ID"
        required: true
        type: "string"
      - name: "args"
        in: "query"
        description: "Additional arguments such as channelId, startTimestamp, endTimestamp,\
          \ etc"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
      security:
      - Bearer: []
  /nlus/{nluName}/predict:
    post:
      summary: "Train NLU"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "nluName"
        in: "path"
        description: "Name of nlu"
        required: true
        type: "string"
      - name: "sentence"
        in: "formData"
        description: "Data to predict"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "Data to predict"
        required: false
        type: "file"
        items:
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/inline_response_200_8"
      security:
      - Bearer: []
  /nlus/{nluName}/debug:
    post:
      summary: "Train NLU"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "nluName"
        in: "path"
        description: "Name of nlu"
        required: true
        type: "string"
      - name: "sentence"
        in: "formData"
        description: "Data to predict"
        required: false
        type: "string"
        items:
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/inline_response_200_9"
      security:
      - Bearer: []
  /nlus/{nluName}/entities:
    get:
      summary: "Get list Entity of nlu"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "nluName"
        in: "path"
        description: "Name of nlu"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties: {}
      security:
      - Bearer: []
    post:
      summary: "Create entity"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "nluName"
        in: "path"
        description: "Name of nlu"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Entity object"
        required: true
        schema:
          $ref: "#/definitions/GeistEntity"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GeistEntity"
      security:
      - Bearer: []
  /nlus/{nluName}/entities/{entityName}:
    get:
      summary: "Get Entity of nlu"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "nluName"
        in: "path"
        description: "Name of nlu"
        required: true
        type: "string"
      - name: "entityName"
        in: "path"
        description: "Name of entityName"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GeistEntity"
      security:
      - Bearer: []
    put:
      summary: "Update entity by name"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "nluName"
        in: "path"
        description: "Name of nlu"
        required: true
        type: "string"
      - name: "entityName"
        in: "path"
        description: "Name of entity"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Nlu"
        required: true
        schema:
          $ref: "#/definitions/GeistEntity"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GeistEntity"
      security:
      - Bearer: []
    delete:
      summary: "Delete entity by name"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "nluName"
        in: "path"
        description: "Name of nlu"
        required: true
        type: "string"
      - name: "entityName"
        in: "path"
        description: "Name of entity"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
      security:
      - Bearer: []
securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  Bot:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "string"
      name:
        type: "string"
        example: "kata-bot"
      version:
        type: "string"
      desc:
        type: "string"
      lang:
        type: "string"
      timezone:
        type: "integer"
      flows:
        type: "object"
        properties: {}
      nlus:
        type: "object"
        properties: {}
      methods:
        type: "object"
        properties: {}
      config:
        type: "object"
        properties: {}
    example:
      flows: "{}"
      timezone: 5
      methods: "{}"
      name: "kata-bot"
      id: "id"
      lang: "lang"
      version: "version"
      config: "{}"
      desc: "desc"
      nlus: "{}"
  Flow:
    type: "object"
    properties:
      fallback:
        type: "boolean"
      priority:
        type: "integer"
      expire:
        type: "integer"
      volatile:
        type: "boolean"
      intents:
        $ref: "#/definitions/Flow_intents"
      states:
        $ref: "#/definitions/Flow_states"
      stateMapper:
        type: "string"
      stateActions:
        $ref: "#/definitions/Flow_stateActions"
      actions:
        $ref: "#/definitions/Flow_actions"
      methods:
        $ref: "#/definitions/Flow_methods"
      nlus:
        $ref: "#/definitions/Flow_nlus"
  Intent:
    type: "object"
    properties:
      condition:
        type: "string"
      type:
        type: "string"
        enum:
        - "data"
        - "text"
        - "command"
      classifier:
        $ref: "#/definitions/IntentClassifier"
      initial:
        type: "boolean"
      priority:
        type: "integer"
      fallback:
        type: "boolean"
      attributes:
        $ref: "#/definitions/Intent_attributes"
  IntentClassifier:
    type: "object"
    properties:
      nlu:
        type: "string"
      hint:
        type: "string"
      match:
        type: "string"
      process:
        type: "string"
      options:
        type: "object"
        properties: {}
  IntentAttribute:
    type: "object"
    properties:
      nlu:
        type: "string"
      hint:
        type: "string"
      path:
        type: "string"
      process:
        type: "string"
      options:
        type: "object"
        properties: {}
  State:
    type: "object"
    properties:
      initial:
        type: "boolean"
      float:
        $ref: "#/definitions/StateTransition"
      action:
        $ref: "#/definitions/StateAction"
      enter:
        type: "string"
      transit:
        type: "string"
      exit:
        type: "string"
      end:
        type: "boolean"
      transitions:
        $ref: "#/definitions/State_transitions"
  StateTransition:
    type: "object"
    properties:
      condition:
        type: "string"
      fallback:
        type: "boolean"
      priority:
        type: "integer"
      mapping:
        type: "string"
  StateAction:
    type: "object"
    properties:
      name:
        type: "string"
      method:
        type: "string"
      condition:
        type: "string"
      options:
        type: "object"
        properties: {}
  StateMapResult:
    type: "object"
    properties:
      state:
        type: "string"
      data:
        type: "object"
        properties: {}
      context:
        type: "object"
        properties: {}
      end:
        type: "boolean"
  FlowProcessResult:
    allOf:
    - $ref: "#/definitions/StateMapResult"
    - properties:
        intent:
          type: "string"
        attributes:
          type: "object"
          properties: {}
        responses:
          type: "array"
          items:
            $ref: "#/definitions/ResponseMessage"
  Action:
    type: "object"
    properties:
      name:
        type: "string"
      method:
        type: "string"
      condition:
        type: "string"
      options:
        type: "object"
        properties: {}
  Nlu:
    type: "object"
    properties:
      type:
        type: "string"
      process:
        type: "string"
      method:
        type: "string"
      options:
        type: "object"
        properties: {}
  Method:
    type: "object"
    properties:
      code:
        type: "string"
      entry:
        type: "string"
  Message:
    type: "object"
    properties:
      type:
        type: "string"
        enum:
        - "text"
        - "data"
        - "command"
      content:
        type: "string"
      payload:
        type: "object"
        properties: {}
      id:
        type: "string"
    example:
      payload: "{}"
      id: "id"
      type: "text"
      content: "content"
  ProcessedMessage:
    allOf:
    - $ref: "#/definitions/Message"
    - properties:
        intent:
          type: "string"
        attributes:
          type: "object"
          properties: {}
  ResponseMessage:
    type: "object"
    properties:
      id:
        type: "string"
      type:
        type: "string"
        enum:
        - "text"
        - "data"
        - "result"
        - "command"
      action:
        type: "string"
      content:
        type: "string"
      payload:
        type: "object"
        properties: {}
  Response:
    allOf:
    - $ref: "#/definitions/ResponseMessage"
    - properties:
        refId:
          type: "string"
        flow:
          type: "string"
  Session:
    type: "object"
    properties:
      id:
        type: "string"
      channelId:
        type: "string"
      deploymentId:
        type: "string"
      dataKey:
        type: "string"
      states:
        type: "string"
      contexes:
        type: "string"
      history:
        type: "array"
        items:
          $ref: "#/definitions/Session_history"
      current:
        type: "string"
      timestamp:
        type: "number"
      meta:
        type: "object"
        properties: {}
      data:
        type: "object"
        properties: {}
    example:
      dataKey: "dataKey"
      current: "current"
      data: "{}"
      meta: "{}"
      deploymentId: "deploymentId"
      id: "id"
      history:
      - flow: "flow"
        timestamp: 0.80082819046101150206595775671303272247314453125
      - flow: "flow"
        timestamp: 0.80082819046101150206595775671303272247314453125
      contexes: "contexes"
      channelId: "channelId"
      states: "states"
      timestamp: 6.02745618307040320615897144307382404804229736328125
  Channel:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      type:
        type: "string"
        enum:
        - "generic"
        - "line"
        - "fbmessenger"
      options:
        type: "object"
        properties: {}
      url:
        type: "string"
      webhook:
        type: "string"
    example:
      webhook: "webhook"
      name: "name"
      options: "{}"
      id: "id"
      type: "generic"
      url: "url"
  Deployment:
    type: "object"
    properties:
      id:
        type: "string"
      dashboard:
        type: "boolean"
      name:
        type: "string"
      botId:
        type: "string"
      botVersion:
        type: "string"
      channels:
        type: "object"
        properties: {}
    example:
      channels: "{}"
      name: "name"
      id: "id"
      botId: "botId"
      dashboard: true
      botVersion: "botVersion"
  Conversation:
    type: "object"
    properties:
      sessionId:
        type: "string"
      message:
        type: "object"
        properties: {}
      dataKey:
        type: "string"
    example:
      dataKey: "dataKey"
      sessionId: "sessionId"
      message: "{}"
  User:
    type: "object"
    properties:
      id:
        type: "string"
      username:
        type: "string"
      email:
        type: "string"
      profile:
        type: "object"
        properties: {}
    example:
      profile: "{}"
      id: "id"
      email: "email"
      username: "username"
  Team:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
      roleId:
        type: "string"
        enum:
        - "teamAdmin"
        - "teamMember"
    example:
      password: "password"
      roleId: "teamAdmin"
      username: "username"
  Subscription:
    type: "object"
    properties:
      id:
        type: "string"
      deploymentId:
        type: "string"
      name:
        type: "string"
      quota:
        type: "string"
      price:
        type: "string"
      penaltyPrice:
        type: "string"
      currency:
        type: "string"
        enum:
        - "usd"
        - "idr"
      startDate:
        type: "number"
      endDate:
        type: "number"
      allowExceed:
        type: "boolean"
      exceedCap:
        type: "number"
      period:
        type: "string"
        enum:
        - "month"
        - "year"
  ExecIntent:
    type: "object"
    properties:
      flow:
        type: "string"
      intent:
        type: "string"
      message:
        $ref: "#/definitions/Message"
      context:
        type: "object"
        properties: {}
      data:
        type: "object"
        properties: {}
  ExecStateMapper:
    type: "object"
    properties:
      flow:
        type: "string"
      state:
        type: "string"
      message:
        $ref: "#/definitions/ProcessedMessage"
      context:
        type: "object"
        properties: {}
      data:
        type: "object"
        properties: {}
  ExecActions:
    type: "object"
    properties:
      flow:
        type: "string"
      state:
        type: "string"
      message:
        $ref: "#/definitions/ProcessedMessage"
      context:
        type: "object"
        properties: {}
      data:
        type: "object"
        properties: {}
  ExecFlow:
    type: "object"
    properties:
      flow:
        type: "string"
      state:
        type: "string"
      message:
        $ref: "#/definitions/Message"
      context:
        type: "object"
        properties: {}
      data:
        type: "object"
        properties: {}
      intent:
        type: "string"
  Login:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
    example:
      password: "password"
      username: "username"
  Token:
    type: "object"
    properties:
      id:
        type: "string"
      type:
        type: "string"
      label:
        type: "string"
      userId:
        type: "string"
      teamId:
        type: "string"
      botId:
        type: "string"
      roleId:
        type: "string"
      expire:
        type: "number"
    example:
      roleId: "roleId"
      teamId: "teamId"
      expire: 0.80082819046101150206595775671303272247314453125
      id: "id"
      label: "label"
      botId: "botId"
      type: "type"
      userId: "userId"
  PagedBot:
    type: "object"
    properties:
      page:
        type: "integer"
      limit:
        type: "integer"
      count:
        type: "integer"
      total:
        type: "integer"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Bot"
    example:
      total: 5
      limit: 6
      count: 1
      page: 0
      items:
      - flows: "{}"
        timezone: 5
        methods: "{}"
        name: "kata-bot"
        id: "id"
        lang: "lang"
        version: "version"
        config: "{}"
        desc: "desc"
        nlus: "{}"
      - flows: "{}"
        timezone: 5
        methods: "{}"
        name: "kata-bot"
        id: "id"
        lang: "lang"
        version: "version"
        config: "{}"
        desc: "desc"
        nlus: "{}"
  PagedGeistNlu:
    type: "object"
    properties:
      page:
        type: "integer"
      limit:
        type: "integer"
      total:
        type: "integer"
      items:
        type: "array"
        items:
          $ref: "#/definitions/inline_response_200_6"
    example:
      total: 1
      limit: 6
      page: 0
      items:
      - visibility: "private"
        name: "name"
        lang: "lang"
      - visibility: "private"
        name: "name"
        lang: "lang"
  Schedule:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      message:
        $ref: "#/definitions/Message"
      start:
        type: "string"
      end:
        type: "string"
      freqType:
        type: "string"
      freqInterval:
        type: "number"
      targets:
        type: "array"
        items:
          $ref: "#/definitions/Schedule_targets"
      vouchers:
        type: "array"
        items:
          type: "string"
    example:
      freqInterval: 5.63737665663332876420099637471139430999755859375
      name: "name"
      start: "start"
      end: "end"
      freqType: "freqType"
      id: "id"
      message:
        payload: "{}"
        id: "id"
        type: "text"
        content: "content"
      vouchers:
      - "vouchers"
      - "vouchers"
      targets:
      - channelId: "channelId"
        users:
        - "users"
        - "users"
      - channelId: "channelId"
        users:
        - "users"
        - "users"
  GeistNlu:
    type: "object"
    properties:
      name:
        type: "string"
      lang:
        type: "string"
      visibility:
        type: "string"
      entity:
        $ref: "#/definitions/GeistEntity"
    example:
      visibility: "visibility"
      name: "name"
      lang: "lang"
      entity:
        resolver: "resolver"
        dictionary: "{}"
        profile: "profile"
        root: "root"
        relModel: "{}"
        name: "name"
        relProfile: "relProfile"
        model: "{}"
        label: "label"
        type: "dict"
        belongsTo: "belongsTo"
  GeistEntity:
    type: "object"
    properties:
      name:
        type: "string"
      type:
        type: "string"
        enum:
        - "dict"
        - "phrase"
        - "trait"
      profile:
        type: "string"
      root:
        type: "string"
      label:
        type: "string"
      relProfile:
        type: "string"
      belongsTo:
        type: "string"
      model:
        type: "object"
        properties: {}
      relModel:
        type: "object"
        properties: {}
      resolver:
        type: "string"
      dictionary:
        type: "object"
        properties: {}
    example:
      resolver: "resolver"
      dictionary: "{}"
      profile: "profile"
      root: "root"
      relModel: "{}"
      name: "name"
      relProfile: "relProfile"
      model: "{}"
      label: "label"
      type: "dict"
      belongsTo: "belongsTo"
  inline_response_200:
    properties:
      versions:
        type: "array"
        items:
          type: "string"
      latest:
        type: "string"
    example:
      versions:
      - "versions"
      - "versions"
      latest: "latest"
  inline_response_200_1:
    properties:
      page:
        type: "integer"
      limit:
        type: "integer"
      count:
        type: "integer"
      total:
        type: "integer"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Deployment"
    example:
      total: 5
      limit: 6
      count: 1
      page: 0
      items:
      - channels: "{}"
        name: "name"
        id: "id"
        botId: "botId"
        dashboard: true
        botVersion: "botVersion"
      - channels: "{}"
        name: "name"
        id: "id"
        botId: "botId"
        dashboard: true
        botVersion: "botVersion"
  inline_response_200_2:
    properties:
      page:
        type: "integer"
      limit:
        type: "integer"
      count:
        type: "integer"
      total:
        type: "integer"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Channel"
    example:
      total: 5
      limit: 6
      count: 1
      page: 0
      items:
      - webhook: "webhook"
        name: "name"
        options: "{}"
        id: "id"
        type: "generic"
        url: "url"
      - webhook: "webhook"
        name: "name"
        options: "{}"
        id: "id"
        type: "generic"
        url: "url"
  inline_response_200_3:
    properties:
      page:
        type: "integer"
      limit:
        type: "integer"
      count:
        type: "integer"
      total:
        type: "integer"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Schedule"
    example:
      total: 5
      limit: 6
      count: 1
      page: 0
      items:
      - freqInterval: 5.63737665663332876420099637471139430999755859375
        name: "name"
        start: "start"
        end: "end"
        freqType: "freqType"
        id: "id"
        message:
          payload: "{}"
          id: "id"
          type: "text"
          content: "content"
        vouchers:
        - "vouchers"
        - "vouchers"
        targets:
        - channelId: "channelId"
          users:
          - "users"
          - "users"
        - channelId: "channelId"
          users:
          - "users"
          - "users"
      - freqInterval: 5.63737665663332876420099637471139430999755859375
        name: "name"
        start: "start"
        end: "end"
        freqType: "freqType"
        id: "id"
        message:
          payload: "{}"
          id: "id"
          type: "text"
          content: "content"
        vouchers:
        - "vouchers"
        - "vouchers"
        targets:
        - channelId: "channelId"
          users:
          - "users"
          - "users"
        - channelId: "channelId"
          users:
          - "users"
          - "users"
  inline_response_200_4:
    properties:
      page:
        type: "integer"
      limit:
        type: "integer"
      count:
        type: "integer"
      total:
        type: "integer"
      items:
        type: "array"
        items:
          $ref: "#/definitions/User"
    example:
      total: 5
      limit: 6
      count: 1
      page: 0
      items:
      - profile: "{}"
        id: "id"
        email: "email"
        username: "username"
      - profile: "{}"
        id: "id"
        email: "email"
        username: "username"
  inline_response_200_5_members:
    properties:
      userId:
        type: "string"
      role:
        type: "string"
        enum:
        - "admin"
        - "member"
    example:
      role: "admin"
      userId: "userId"
  inline_response_200_5:
    properties:
      team:
        $ref: "#/definitions/Team"
      members:
        type: "array"
        items:
          $ref: "#/definitions/inline_response_200_5_members"
    example:
      members:
      - role: "admin"
        userId: "userId"
      - role: "admin"
        userId: "userId"
      team:
        password: "password"
        roleId: "teamAdmin"
        username: "username"
  body:
    type: "object"
    properties:
      roleId:
        type: "string"
        enum:
        - "teamAdmin"
        - "teamMember"
  inline_response_200_6:
    properties:
      name:
        type: "string"
      lang:
        type: "string"
      visibility:
        type: "string"
        enum:
        - "private"
        - "public"
    example:
      visibility: "private"
      name: "name"
      lang: "lang"
  body_1:
    type: "object"
    properties:
      name:
        type: "string"
      lang:
        type: "string"
      visibility:
        type: "string"
        enum:
        - "private"
        - "public"
  inline_response_200_7:
    properties:
      count:
        type: "number"
      status:
        type: "string"
    example:
      count: 0.80082819046101150206595775671303272247314453125
      status: "status"
  inline_response_200_8_entityName:
    properties:
      value:
        type: "string"
      score:
        type: "number"
      start:
        type: "number"
      end:
        type: "number"
    example:
      score: 0.80082819046101150206595775671303272247314453125
      start: 6.02745618307040320615897144307382404804229736328125
      end: 1.46581298050294517310021547018550336360931396484375
      value: "value"
  inline_response_200_8_result:
    properties:
      entityName:
        $ref: "#/definitions/inline_response_200_8_entityName"
    example:
      entityName:
        score: 0.80082819046101150206595775671303272247314453125
        start: 6.02745618307040320615897144307382404804229736328125
        end: 1.46581298050294517310021547018550336360931396484375
        value: "value"
  inline_response_200_8:
    properties:
      result:
        type: "array"
        items:
          $ref: "#/definitions/inline_response_200_8_result"
    example:
      result:
      - entityName:
          score: 0.80082819046101150206595775671303272247314453125
          start: 6.02745618307040320615897144307382404804229736328125
          end: 1.46581298050294517310021547018550336360931396484375
          value: "value"
      - entityName:
          score: 0.80082819046101150206595775671303272247314453125
          start: 6.02745618307040320615897144307382404804229736328125
          end: 1.46581298050294517310021547018550336360931396484375
          value: "value"
  inline_response_200_9:
    properties:
      result:
        type: "object"
        properties: {}
    example:
      result: "{}"
  Flow_intents:
    properties:
      name:
        $ref: "#/definitions/Intent"
  Flow_states:
    properties:
      name:
        $ref: "#/definitions/State"
  Flow_stateActions:
    properties:
      name:
        $ref: "#/definitions/StateAction"
  Flow_actions:
    properties:
      name:
        $ref: "#/definitions/Action"
  Flow_methods:
    properties:
      name:
        $ref: "#/definitions/Method"
  Flow_nlus:
    properties:
      name:
        $ref: "#/definitions/Nlu"
  Intent_attributes:
    properties:
      name:
        $ref: "#/definitions/IntentAttribute"
  State_transitions:
    properties:
      name:
        $ref: "#/definitions/StateTransition"
  Session_history:
    properties:
      flow:
        type: "string"
      timestamp:
        type: "number"
    example:
      flow: "flow"
      timestamp: 0.80082819046101150206595775671303272247314453125
  Schedule_targets:
    properties:
      channelId:
        type: "string"
      users:
        type: "array"
        items:
          type: "string"
    example:
      channelId: "channelId"
      users:
      - "users"
      - "users"
